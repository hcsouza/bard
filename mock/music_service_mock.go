package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/hcsouza/bard/music.MusicService -o ./music_service_mock_test.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/zmb3/spotify"
)

// MusicServiceMock implements MusicService
type MusicServiceMock struct {
	t minimock.Tester

	funcSearchOpt          func(query string, t spotify.SearchType, opt *spotify.Options) (sp1 *spotify.SearchResult, err error)
	inspectFuncSearchOpt   func(query string, t spotify.SearchType, opt *spotify.Options)
	afterSearchOptCounter  uint64
	beforeSearchOptCounter uint64
	SearchOptMock          mMusicServiceMockSearchOpt
}

// NewMusicServiceMock returns a mock for MusicService
func NewMusicServiceMock(t minimock.Tester) *MusicServiceMock {
	m := &MusicServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SearchOptMock = mMusicServiceMockSearchOpt{mock: m}
	m.SearchOptMock.callArgs = []*MusicServiceMockSearchOptParams{}

	return m
}

type mMusicServiceMockSearchOpt struct {
	mock               *MusicServiceMock
	defaultExpectation *MusicServiceMockSearchOptExpectation
	expectations       []*MusicServiceMockSearchOptExpectation

	callArgs []*MusicServiceMockSearchOptParams
	mutex    sync.RWMutex
}

// MusicServiceMockSearchOptExpectation specifies expectation struct of the MusicService.SearchOpt
type MusicServiceMockSearchOptExpectation struct {
	mock    *MusicServiceMock
	params  *MusicServiceMockSearchOptParams
	results *MusicServiceMockSearchOptResults
	Counter uint64
}

// MusicServiceMockSearchOptParams contains parameters of the MusicService.SearchOpt
type MusicServiceMockSearchOptParams struct {
	query string
	t     spotify.SearchType
	opt   *spotify.Options
}

// MusicServiceMockSearchOptResults contains results of the MusicService.SearchOpt
type MusicServiceMockSearchOptResults struct {
	sp1 *spotify.SearchResult
	err error
}

// Expect sets up expected params for MusicService.SearchOpt
func (mmSearchOpt *mMusicServiceMockSearchOpt) Expect(query string, t spotify.SearchType, opt *spotify.Options) *mMusicServiceMockSearchOpt {
	if mmSearchOpt.mock.funcSearchOpt != nil {
		mmSearchOpt.mock.t.Fatalf("MusicServiceMock.SearchOpt mock is already set by Set")
	}

	if mmSearchOpt.defaultExpectation == nil {
		mmSearchOpt.defaultExpectation = &MusicServiceMockSearchOptExpectation{}
	}

	mmSearchOpt.defaultExpectation.params = &MusicServiceMockSearchOptParams{query, t, opt}
	for _, e := range mmSearchOpt.expectations {
		if minimock.Equal(e.params, mmSearchOpt.defaultExpectation.params) {
			mmSearchOpt.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSearchOpt.defaultExpectation.params)
		}
	}

	return mmSearchOpt
}

// Inspect accepts an inspector function that has same arguments as the MusicService.SearchOpt
func (mmSearchOpt *mMusicServiceMockSearchOpt) Inspect(f func(query string, t spotify.SearchType, opt *spotify.Options)) *mMusicServiceMockSearchOpt {
	if mmSearchOpt.mock.inspectFuncSearchOpt != nil {
		mmSearchOpt.mock.t.Fatalf("Inspect function is already set for MusicServiceMock.SearchOpt")
	}

	mmSearchOpt.mock.inspectFuncSearchOpt = f

	return mmSearchOpt
}

// Return sets up results that will be returned by MusicService.SearchOpt
func (mmSearchOpt *mMusicServiceMockSearchOpt) Return(sp1 *spotify.SearchResult, err error) *MusicServiceMock {
	if mmSearchOpt.mock.funcSearchOpt != nil {
		mmSearchOpt.mock.t.Fatalf("MusicServiceMock.SearchOpt mock is already set by Set")
	}

	if mmSearchOpt.defaultExpectation == nil {
		mmSearchOpt.defaultExpectation = &MusicServiceMockSearchOptExpectation{mock: mmSearchOpt.mock}
	}
	mmSearchOpt.defaultExpectation.results = &MusicServiceMockSearchOptResults{sp1, err}
	return mmSearchOpt.mock
}

//Set uses given function f to mock the MusicService.SearchOpt method
func (mmSearchOpt *mMusicServiceMockSearchOpt) Set(f func(query string, t spotify.SearchType, opt *spotify.Options) (sp1 *spotify.SearchResult, err error)) *MusicServiceMock {
	if mmSearchOpt.defaultExpectation != nil {
		mmSearchOpt.mock.t.Fatalf("Default expectation is already set for the MusicService.SearchOpt method")
	}

	if len(mmSearchOpt.expectations) > 0 {
		mmSearchOpt.mock.t.Fatalf("Some expectations are already set for the MusicService.SearchOpt method")
	}

	mmSearchOpt.mock.funcSearchOpt = f
	return mmSearchOpt.mock
}

// When sets expectation for the MusicService.SearchOpt which will trigger the result defined by the following
// Then helper
func (mmSearchOpt *mMusicServiceMockSearchOpt) When(query string, t spotify.SearchType, opt *spotify.Options) *MusicServiceMockSearchOptExpectation {
	if mmSearchOpt.mock.funcSearchOpt != nil {
		mmSearchOpt.mock.t.Fatalf("MusicServiceMock.SearchOpt mock is already set by Set")
	}

	expectation := &MusicServiceMockSearchOptExpectation{
		mock:   mmSearchOpt.mock,
		params: &MusicServiceMockSearchOptParams{query, t, opt},
	}
	mmSearchOpt.expectations = append(mmSearchOpt.expectations, expectation)
	return expectation
}

// Then sets up MusicService.SearchOpt return parameters for the expectation previously defined by the When method
func (e *MusicServiceMockSearchOptExpectation) Then(sp1 *spotify.SearchResult, err error) *MusicServiceMock {
	e.results = &MusicServiceMockSearchOptResults{sp1, err}
	return e.mock
}

// SearchOpt implements MusicService
func (mmSearchOpt *MusicServiceMock) SearchOpt(query string, t spotify.SearchType, opt *spotify.Options) (sp1 *spotify.SearchResult, err error) {
	mm_atomic.AddUint64(&mmSearchOpt.beforeSearchOptCounter, 1)
	defer mm_atomic.AddUint64(&mmSearchOpt.afterSearchOptCounter, 1)

	if mmSearchOpt.inspectFuncSearchOpt != nil {
		mmSearchOpt.inspectFuncSearchOpt(query, t, opt)
	}

	mm_params := &MusicServiceMockSearchOptParams{query, t, opt}

	// Record call args
	mmSearchOpt.SearchOptMock.mutex.Lock()
	mmSearchOpt.SearchOptMock.callArgs = append(mmSearchOpt.SearchOptMock.callArgs, mm_params)
	mmSearchOpt.SearchOptMock.mutex.Unlock()

	for _, e := range mmSearchOpt.SearchOptMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmSearchOpt.SearchOptMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSearchOpt.SearchOptMock.defaultExpectation.Counter, 1)
		mm_want := mmSearchOpt.SearchOptMock.defaultExpectation.params
		mm_got := MusicServiceMockSearchOptParams{query, t, opt}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSearchOpt.t.Errorf("MusicServiceMock.SearchOpt got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSearchOpt.SearchOptMock.defaultExpectation.results
		if mm_results == nil {
			mmSearchOpt.t.Fatal("No results are set for the MusicServiceMock.SearchOpt")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmSearchOpt.funcSearchOpt != nil {
		return mmSearchOpt.funcSearchOpt(query, t, opt)
	}
	mmSearchOpt.t.Fatalf("Unexpected call to MusicServiceMock.SearchOpt. %v %v %v", query, t, opt)
	return
}

// SearchOptAfterCounter returns a count of finished MusicServiceMock.SearchOpt invocations
func (mmSearchOpt *MusicServiceMock) SearchOptAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSearchOpt.afterSearchOptCounter)
}

// SearchOptBeforeCounter returns a count of MusicServiceMock.SearchOpt invocations
func (mmSearchOpt *MusicServiceMock) SearchOptBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSearchOpt.beforeSearchOptCounter)
}

// Calls returns a list of arguments used in each call to MusicServiceMock.SearchOpt.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSearchOpt *mMusicServiceMockSearchOpt) Calls() []*MusicServiceMockSearchOptParams {
	mmSearchOpt.mutex.RLock()

	argCopy := make([]*MusicServiceMockSearchOptParams, len(mmSearchOpt.callArgs))
	copy(argCopy, mmSearchOpt.callArgs)

	mmSearchOpt.mutex.RUnlock()

	return argCopy
}

// MinimockSearchOptDone returns true if the count of the SearchOpt invocations corresponds
// the number of defined expectations
func (m *MusicServiceMock) MinimockSearchOptDone() bool {
	for _, e := range m.SearchOptMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SearchOptMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSearchOptCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSearchOpt != nil && mm_atomic.LoadUint64(&m.afterSearchOptCounter) < 1 {
		return false
	}
	return true
}

// MinimockSearchOptInspect logs each unmet expectation
func (m *MusicServiceMock) MinimockSearchOptInspect() {
	for _, e := range m.SearchOptMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MusicServiceMock.SearchOpt with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SearchOptMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSearchOptCounter) < 1 {
		if m.SearchOptMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MusicServiceMock.SearchOpt")
		} else {
			m.t.Errorf("Expected call to MusicServiceMock.SearchOpt with params: %#v", *m.SearchOptMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSearchOpt != nil && mm_atomic.LoadUint64(&m.afterSearchOptCounter) < 1 {
		m.t.Error("Expected call to MusicServiceMock.SearchOpt")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MusicServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSearchOptInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MusicServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MusicServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSearchOptDone()
}
